{"version":3,"file":"app.js","sourceRoot":"","sources":["../src/app.ts"],"names":[],"mappings":";;AAAA,mCAAmC;AAGnC,8CAA8C;AAC9C,wDAAwD;AAGxD,0CAAoC;AAEpC,MAAM,GAAG,GAAG,OAAO,EAAE,CAAC;AACtB,MAAM,MAAM,GAAG,OAAO,CAAC,aAAa,CAAC,CAAC,SAAS,CAAC,CAAC;AAEjD,GAAG,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,EAAE;IAG/B,GAAG,CAAC,MAAM,CAAC,6BAA6B,EAAE,GAAG,CAAC,CAAC;IAC/C,GAAG,CAAC,MAAM,CAAC,8BAA8B,EAAE,+CAA+C,CAAC,CAAC;IAC5F,GAAG,CAAC,MAAM,CAAC,8BAA8B,EAAE,6BAA6B,CAAC,CAAC;IACxE,GAAG,CAAC,MAAM,CAAC,kCAAkC,EAAE,MAAM,CAAC,CAAC;IACzD,GAAG,CAAC,MAAM,CAAC,cAAc,EAAE,OAAO,CAAC,CAAA;IACnC,EAAE,CAAC,CAAC,GAAG,CAAC,MAAM,IAAI,SAAS,CAAC,CAAC,CAAC;QAC3B,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IACjB,CAAC;IAAC,IAAI,CAAC,CAAC;QACJ,IAAI,EAAE,CAAC;IACX,CAAC;AACF,CAAC,CAAC,CAAC;AAGH,GAAG,CAAC,GAAG,CAAC,YAAY,EAAE,CAAC,CAAC;AAcxB,eAAM,CAAC,GAAG,CAAC,CAAC;AAEZ,GAAG,CAAC,GAAG,CAAC,OAAO,EAAE,CAAC,CAAC;AACnB,GAAG,CAAC,GAAG,CAAC,OAAO,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC,CAAA;AAEpC,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,EAAC,CAAC,GAAO,EAAE,EAAE;IAC/B,EAAE,CAAA,CAAC,GAAG,CAAC,CAAC,CAAC;QACL,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAA;IACpB,CAAC;IAAC,IAAI,CAAC,CAAC;QACJ,OAAO,CAAC,GAAG,CAAC,+BAA+B,EAAC,MAAM,CAAC,IAAI,CAAC,CAAA;IAC5D,CAAC;AACL,CAAC,CAAC,CAAA","sourcesContent":["import * as express from 'express';\r\n// import connectMongo from 'connect-mongo';\r\n// import * as session from 'express-session';\r\nimport * as cookieParser from 'cookie-parser';\r\nimport * as history from 'connect-history-api-fallback';\r\n// import * as Redis from 'ioredis';\r\n// var Redis = require('ioredis')\r\nimport router from './routes/index';\r\n\r\nconst app = express();\r\nconst config = require('config-lite')(__dirname);\r\n\r\napp.all('*', (req, res, next) => {\r\n\t// const origin = req.headers.origin;\r\n\t// res.header(\"Access-Control-Allow-Origin\", req.headers.origin || '*');\r\n\tres.header(\"Access-Control-Allow-Origin\", '*');\r\n\tres.header(\"Access-Control-Allow-Headers\", \"Content-Type, Authorization, X-Requested-With\");\r\n\tres.header(\"Access-Control-Allow-Methods\", \"PUT,POST,GET,DELETE,OPTIONS\");\r\n  \tres.header(\"Access-Control-Allow-Credentials\", 'true'); //可以带cookies\r\n\tres.header(\"X-Powered-By\", '3.2.1')\r\n\tif (req.method == 'OPTIONS') {\r\n\t  \tres.send(200);\r\n\t} else {\r\n\t    next();\r\n\t}\r\n});\r\n\r\n// const MongoStore = connectMongo(session);\r\napp.use(cookieParser());\r\n// app.use(session({\r\n//     name:config.session.name,\r\n//     secret:config.session.secret,\r\n//     resave:true,\r\n//     saveUninitialized:false,\r\n//     cookie:config.session.cookie,\r\n//     store:new MongoStore({\r\n//         url:config.url\r\n//     })\r\n// }))\r\n\r\n// new Redis(config.redis)\r\n\r\nrouter(app);\r\n\r\napp.use(history());\r\napp.use(express.static('../public'))\r\n\r\napp.listen(config.port,(err:any) => {\r\n    if(err) {\r\n        console.log(err)\r\n    } else {\r\n        console.log('my server is start,port is %s',config.port)\r\n    }\r\n})"]}