{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/controller/common/index.ts"],"names":[],"mappings":"AAAA,YAAY,CAAA;;AACZ,MAAM,KAAK,GAAG,OAAO,CAAC,SAAS,CAAC,CAAC;AACjC,MAAM,KAAK,GAAG,IAAI,KAAK,EAAE,CAAC;AAC1B,MAAM,MAAM,GAAG,OAAO,CAAC,aAAa,CAAC,CAAC,SAAS,CAAC,CAAC;AAGjD,8CAAuD;AACvD,2CAAoC;AAEpC;IACI,MAAM,CAAC,IAAI,OAAO,CAAC,CAAC,OAAO,EAAC,MAAM,EAAE,EAAE;QAClC,gBAAQ,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC;aACxB,IAAI,CAAC,CAAC,GAAG,EAAE,EAAE;YACV,OAAO,CAAC,GAAG,CAAC,CAAA;QAChB,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,KAAK,EAAE,EAAE;YACf,MAAM,CAAC,KAAK,CAAC,CAAA;YACb,MAAM,IAAI,KAAK,CAAC,KAAK,CAAC,CAAA;QAC1B,CAAC,CAAC,CAAA;IACV,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,OAAO,CAAC,CAAC,OAAO,EAAC,MAAM,EAAE,EAAE;QAC1C,EAAE,CAAA,CAAC,GAAG,CAAC,CAAC,CAAC;YACL,OAAO,CAAC,GAAG,CAAC,CAAA;QAChB,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,IAAI,eAAM,EAAE,CAAC,cAAc,EAAE,CAAC,IAAI,CAAC,CAAC,GAAO,EAAE,EAAE;gBAC3C,iBAAS,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,EAAC,GAAG,CAAC,YAAY,EAAC,IAAI,CAAC;qBAC/C,IAAI,CAAC,CAAC,OAAO,EAAE,EAAE;oBACd,OAAO,CAAC,GAAG,CAAC,YAAY,CAAC,CAAA;gBAC7B,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,KAAS,EAAE,EAAE;oBACnB,MAAM,CAAC,KAAK,CAAC,CAAA;oBACb,MAAM,IAAI,KAAK,CAAC,KAAK,CAAC,CAAA;gBAC1B,CAAC,CAAC,CAAA;YACV,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,KAAK,EAAE,EAAE;gBACf,MAAM,CAAC,KAAK,CAAC,CAAA;gBACb,MAAM,IAAI,KAAK,CAAC,KAAK,CAAC,CAAA;YAC1B,CAAC,CAAC,CAAA;QACN,CAAC;IACL,CAAC,CAAC,CAAC;SACF,KAAK,CAAC,KAAK,CAAC,EAAE;QACX,MAAM,IAAI,KAAK,CAAC,KAAK,CAAC,CAAA;IAC1B,CAAC,CAAC,CAAA;AACN,CAAC;AA9BD,wCA8BC","sourcesContent":["'use strict'\r\nconst Redis = require('ioredis');\r\nconst redis = new Redis();\r\nconst config = require('config-lite')(__dirname);\r\n\r\nimport { Request,Response,NextFunction } from 'express'\r\nimport { saveRedis,getRedis } from '../../common/utils'\r\nimport Wechat from '../wechat/index'\r\n\r\nexport function getAccessToken() {\r\n    return new Promise((resolve,reject) => {\r\n        getRedis(config.wechat.token)\r\n            .then((res) => {\r\n                resolve(res)\r\n            }).catch((error) => {\r\n                reject(error)\r\n                throw new Error(error)\r\n            })\r\n    }).then(res => new Promise((resolve,reject) => {\r\n        if(res) {\r\n            resolve(res)\r\n        } else {\r\n            new Wechat().getAccessToken().then((res:any) => {\r\n                saveRedis(config.wechat.token,res.access_token,7100)\r\n                    .then((success) => {\r\n                        resolve(res.access_token)\r\n                    }).catch((error:any) => {\r\n                        reject(error)\r\n                        throw new Error(error)\r\n                    })\r\n            }).catch((error) => {\r\n                reject(error)\r\n                throw new Error(error)\r\n            })\r\n        }\r\n    }))\r\n    .catch(error => {\r\n        throw new Error(error)\r\n    })\r\n}"]}