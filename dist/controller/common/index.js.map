{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/controller/common/index.ts"],"names":[],"mappings":"AAAA,YAAY,CAAA;;AACZ,MAAM,KAAK,GAAG,OAAO,CAAC,SAAS,CAAC,CAAC;AACjC,MAAM,KAAK,GAAG,IAAI,KAAK,EAAE,CAAC;AAC1B,MAAM,MAAM,GAAG,OAAO,CAAC,aAAa,CAAC,CAAC,SAAS,CAAC,CAAC;AAGjD,8CAAuD;AACvD,2CAAoC;AAGpC;IACI,IAAI,OAAO,CAAC,CAAC,OAAO,EAAC,MAAM,EAAE,EAAE;QAC3B,gBAAQ,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC;aACxB,IAAI,CAAC,CAAC,GAAG,EAAE,EAAE;YACV,EAAE,CAAA,CAAC,GAAG,CAAC,CAAC,CAAC;gBACL,OAAO,CAAC,GAAG,CAAC,CAAA;YAChB,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,IAAI,eAAM,EAAE,CAAC,cAAc,EAAE,CAAC,IAAI,CAAC,CAAC,GAAO,EAAE,EAAE;oBAC3C,iBAAS,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,EAAC,GAAG,CAAC,YAAY,EAAC,GAAG,CAAC;yBAC9C,IAAI,CAAC,CAAC,GAAG,EAAE,EAAE;wBACV,OAAO,CAAC,GAAG,CAAC,KAAK,EAAC,GAAG,CAAC,CAAA;wBACtB,OAAO,CAAC,GAAG,CAAC,CAAA;oBAChB,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,KAAS,EAAE,EAAE;wBACnB,MAAM,CAAC,KAAK,CAAC,CAAA;wBACb,MAAM,IAAI,KAAK,CAAC,KAAK,CAAC,CAAA;oBAC1B,CAAC,CAAC,CAAA;gBACV,CAAC,CAAC,CAAA;YACN,CAAC;QACL,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,KAAK,EAAE,EAAE;YACf,MAAM,CAAC,KAAK,CAAC,CAAA;YACb,MAAM,IAAI,KAAK,CAAC,KAAK,CAAC,CAAA;QAC1B,CAAC,CAAC,CAAA;IACV,CAAC,CAAC,CAAA;AACN,CAAC;AAvBD,8CAuBC","sourcesContent":["'use strict'\r\nconst Redis = require('ioredis');\r\nconst redis = new Redis();\r\nconst config = require('config-lite')(__dirname);\r\n\r\nimport { Request,Response,NextFunction } from 'express'\r\nimport { saveRedis,getRedis } from '../../common/utils'\r\nimport Wechat from '../wechat/index'\r\nimport { resolve } from 'path';\r\n\r\nexport function updateAccessToken() {\r\n    new Promise((resolve,reject) => {\r\n        getRedis(config.wechat.token)\r\n            .then((res) => {\r\n                if(res) {\r\n                    resolve(res)\r\n                } else {\r\n                    new Wechat().getAccessToken().then((res:any) => {\r\n                        saveRedis(config.wechat.token,res.access_token,100)\r\n                            .then((res) => {\r\n                                console.log('res',res)\r\n                                resolve(res)\r\n                            }).catch((error:any) => {\r\n                                reject(error)\r\n                                throw new Error(error)\r\n                            })\r\n                    })\r\n                }\r\n            }).catch((error) => {\r\n                reject(error)\r\n                throw new Error(error)\r\n            })\r\n    })\r\n}"]}