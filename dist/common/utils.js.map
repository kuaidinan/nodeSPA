{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../src/common/utils.ts"],"names":[],"mappings":";;AACA,mCAAmC;AACnC,MAAM,MAAM,GAAG,OAAO,CAAC,aAAa,CAAC,CAAC,SAAS,CAAC,CAAC;AACjD,MAAM,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC;AAC7B,MAAM,KAAK,GAAG,OAAO,CAAC,SAAS,CAAC,CAAC;AACjC,MAAM,KAAK,GAAG,IAAI,KAAK,EAAE,CAAC;AAE1B,cAAqB,GAAW,EAAC,GAAY;IACzC,IAAI,CAAC,GAAG,GAAG,CAAC,KAAK,CAAC;IAClB,IAAI,KAAK,GAAG,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC;IAChC,IAAI,SAAS,GAAG,CAAC,CAAC,SAAS,CAAC;IAC5B,IAAI,KAAK,GAAG,CAAC,CAAC,KAAK,CAAC;IACpB,IAAI,SAAS,GAAG,CAAC,CAAC,SAAS,CAAC;IAC5B,IAAI,OAAO,GAAG,CAAC,CAAC,OAAO,CAAC;IACxB,IAAI,GAAG,GAAG,CAAC,KAAK,EAAE,SAAS,EAAE,KAAK,CAAC,CAAC,IAAI,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;IACpD,IAAI,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC;IACpB,EAAE,CAAC,CAAC,GAAG,IAAI,SAAS,CAAC,CAAC,CAAC;QACnB,GAAG,CAAC,IAAI,CAAC,OAAO,GAAC,EAAE,CAAC,CAAA;IACxB,CAAC;IAAA,IAAI,CAAA,CAAC;QACF,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IACpB,CAAC;AACL,CAAC;AAdD,oBAcC;AAED,eAAsB,MAAU;IAC5B,MAAM,CAAC,IAAI,OAAO,CAAC,CAAC,OAAO,EAAC,MAAM,EAAE,EAAE;QAClC,OAAO,mBAAK,MAAM,GAAE,CAAC,KAAS,EAAC,QAAY,EAAC,IAAQ,EAAE,EAAE;YACpD,EAAE,CAAA,CAAC,KAAK,CAAC,CAAC,CAAC;gBACP,MAAM,CAAC,KAAK,CAAC,CAAA;gBACb,MAAM,CAAA;YACV,CAAC;YACD,OAAO,CAAC,IAAI,CAAC,CAAA;QACjB,CAAC,CAAC,CAAA;IACN,CAAC,CAAC,CAAA;AACN,CAAC;AAVD,sBAUC;AAED,mBAA0B,OAAc,EAAC,QAAY,EAAC,QAAe;IACjE,MAAM,CAAC,IAAI,OAAO,CAAC,CAAC,OAAO,EAAC,MAAM,EAAE,EAAE;QAClC,KAAK,CAAC,GAAG,CAAC,OAAO,EAAE,QAAQ,EAAE,IAAI,EAAE,QAAQ,EAAC,CAAC,GAAO,EAAC,MAAU,EAAE,EAAE;YAC/D,EAAE,CAAA,CAAC,GAAG,CAAC,CAAC,CAAC;gBACL,MAAM,CAAC,GAAG,CAAC,CAAA;gBACX,MAAM,CAAA;YACV,CAAC;YACD,OAAO,CAAC,MAAM,CAAC,CAAA;QACnB,CAAC,CAAC,CAAC;IACP,CAAC,CAAC,CAAA;AACN,CAAC;AAVD,8BAUC;AAED,kBAAyB,OAAc;IACnC,MAAM,CAAC,IAAI,OAAO,CAAC,CAAC,OAAO,EAAC,MAAM,EAAE,EAAE;QAClC,KAAK,CAAC,GAAG,CAAC,OAAO,EAAE,CAAC,GAAO,EAAE,MAAU,EAAE,EAAE;YACvC,EAAE,CAAA,CAAC,GAAG,CAAC,CAAC,CAAC;gBACL,MAAM,CAAC,GAAG,CAAC,CAAA;gBACX,MAAM,CAAA;YACV,CAAC;YACD,OAAO,CAAC,MAAM,CAAC,CAAA;QACnB,CAAC,CAAC,CAAA;IACN,CAAC,CAAC,CAAA;AACN,CAAC;AAVD,4BAUC","sourcesContent":["import { Request,Response } from 'express';\r\nimport * as request from 'request';\r\nconst config = require('config-lite')(__dirname);\r\nconst sha1 = require('sha1');\r\nconst Redis = require('ioredis');\r\nconst redis = new Redis();\r\n\r\nexport function sign(req:Request,res:Response) {\r\n    var q = req.query;\r\n    var token = config.wechat.token;  \r\n    var signature = q.signature; //微信加密签名  \r\n    var nonce = q.nonce; //随机数  \r\n    var timestamp = q.timestamp; //时间戳\r\n    var echostr = q.echostr; //随机字符串\r\n    var str = [token, timestamp, nonce].sort().join('');\r\n    var sha = sha1(str);  \r\n    if (sha == signature) {\r\n        res.send(echostr+'')\r\n    }else{  \r\n        res.send('err');  \r\n    } \r\n}\r\n\r\nexport function fetch(option:any) {\r\n    return new Promise((resolve,reject) => {\r\n        request({...option},(error:any,response:any,body:any) => {\r\n            if(error) {\r\n                reject(error)\r\n                return\r\n            }\r\n            resolve(body)\r\n        })\r\n    })\r\n}\r\n\r\nexport function saveRedis(keyName:String,keyValue:any,expireat:Number) {\r\n    return new Promise((resolve,reject) => {\r\n        redis.set(keyName, keyValue, 'EX', expireat,(err:any,result:any) => {\r\n            if(err) {\r\n                reject(err)\r\n                return\r\n            }\r\n            resolve(result)\r\n        });\r\n    })\r\n}\r\n\r\nexport function getRedis(keyName:String) {\r\n    return new Promise((resolve,reject) => {\r\n        redis.get(keyName, (err:any, result:any) => {\r\n            if(err) {\r\n                reject(err)\r\n                return\r\n            }\r\n            resolve(result)\r\n        })\r\n    })\r\n}"]}